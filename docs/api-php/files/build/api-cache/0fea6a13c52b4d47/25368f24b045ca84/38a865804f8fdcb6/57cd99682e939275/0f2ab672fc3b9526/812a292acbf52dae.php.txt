<?php 
/* Cachekey: cache/stash_default/documentation\api\php\25d046185fb6005f679daa8318ec8e8b/ */
/* Type: array */
/* Expiration: 2019-02-20T21:42:48+01:00 */



$loaded = true;
$expiration = 1550695368;

$data = array();

/* Child Type: object */
$data['return'] = unserialize(base64_decode(''));

/* Child Type: integer */
$data['createdOn'] = 1550314079;

