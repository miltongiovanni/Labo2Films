<?php 
/* Cachekey: cache/stash_default/documentation\api\php\86c3b143886ddb171fd136ba014ee880/ */
/* Type: array */
/* Expiration: 2019-02-23T17:37:19+01:00 */



$loaded = true;
$expiration = 1550939839;

$data = array();

/* Child Type: object */
$data['return'] = unserialize(base64_decode(''));

/* Child Type: integer */
$data['createdOn'] = 1550516381;

