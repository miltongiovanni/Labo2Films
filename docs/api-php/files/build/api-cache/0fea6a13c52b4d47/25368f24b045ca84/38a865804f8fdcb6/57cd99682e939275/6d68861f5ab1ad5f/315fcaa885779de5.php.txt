<?php 
/* Cachekey: cache/stash_default/documentation\api\php\a174b15c9dd15186fa1bc3d96f90d32b/ */
/* Type: array */
/* Expiration: 2019-02-20T23:39:41+01:00 */



$loaded = true;
$expiration = 1550702381;

$data = array();

/* Child Type: object */
$data['return'] = unserialize(base64_decode(''));

/* Child Type: integer */
$data['createdOn'] = 1550313884;

