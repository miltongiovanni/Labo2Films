<?php 
/* Cachekey: cache/stash_default/documentation\api\php\dd04d6257f564c6e84e2ee00a8004fb3/ */
/* Type: array */
/* Expiration: 2019-02-21T00:09:15+01:00 */



$loaded = true;
$expiration = 1550704155;

$data = array();

/* Child Type: object */
$data['return'] = unserialize(base64_decode(''));

/* Child Type: integer */
$data['createdOn'] = 1550314080;

